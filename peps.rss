<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Wed, 09 Apr 2025 08:30:24 GMT</lastBuildDate>
    <item>
      <title>PEP 784: Adding Zstandard to the standard library</title>
      <link>https://peps.python.org/pep-0784/</link>
      <description>Zstandard is a widely adopted, mature, and highly efficient compression standard. This PEP proposes adding a new module to the Python standard library containing a Python wrapper around Metaâ€™s zstd library, the default implementation. Additionally, to avoid name collisions with packages on PyPI and to present a unified interface to Python users, compression modules in the standard library will be moved under a compression.* package.</description>
      <author>Emma Harper Smith (emma@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0784/</guid>
      <pubDate>Sun, 06 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 783: Emscripten Packaging</title>
      <link>https://peps.python.org/pep-0783/</link>
      <description>This PEP proposes a new platform tag series pyodide for binary Python package distributions for the Pyodide Python runtime.</description>
      <author>Hood Chatham (roberthoodchatham at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0783/</guid>
      <pubDate>Fri, 28 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 782: Add PyBytesWriter C API</title>
      <link>https://peps.python.org/pep-0782/</link>
      <description>Add a new PyBytesWriter C API to create bytes objects.</description>
      <author>Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0782/</guid>
      <pubDate>Thu, 27 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 781: Make ``TYPE_CHECKING`` a built-in constant</title>
      <link>https://peps.python.org/pep-0781/</link>
      <description>This PEP proposes adding a new built-in variable, TYPE_CHECKING, to improve the experience of writing Python code with type annotations. It is evaluated as True when the code is being analyzed by a static type checker, and as False during normal runtime execution. Unlike typing.TYPE_CHECKING, which this variable replaces, it does not require an import statement.</description>
      <author>Inada Naoki (songofacandy@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0781/</guid>
      <pubDate>Mon, 24 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 780: ABI features as environment markers</title>
      <link>https://peps.python.org/pep-0780/</link>
      <description>This PEP defines using ABI features as environment markers for project dependencies, through a new sys_abi_features environment marker and sys.abi_features attribute in the sys module. PEP 508 (later moved to packaging:dependency-specifiers) introduced environment markers to specify dependencies based on rules that describe when the dependency should be used. This PEP extends the environment markers to allow specifying dependencies based on specific ABI features of the Python interpreter. For this, it defines a set of ABI Features and specifies how they are made available via an addition to the Python Standard Library in the form of a new attribute sys.abi_features, as well as for environment markers as a new marker variable, sys_abi_features.</description>
      <author>Klaus Zimmermann (klaus_zimmermann@gmx.de), Ralf Gommers (ralf.gommers@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0780/</guid>
      <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 776: Emscripten Support</title>
      <link>https://peps.python.org/pep-0776/</link>
      <description>Emscripten is a complete open source compiler toolchain. It compiles C/C++ code into WebAssembly/JavaScript executables, for use in JavaScript runtimes, including browsers and Node.js. The Rust language also maintains an Emscripten target.</description>
      <author>Hood Chatham (roberthoodchatham at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0776/</guid>
      <pubDate>Tue, 18 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 779: Criteria for supported status for free-threaded Python</title>
      <link>https://peps.python.org/pep-0779/</link>
      <description>The acceptance of PEP 703 (Making the Global Interpreter Lock Optional in CPython), as announced by the Steering Council, describes three phases of development for the work to remove the Global Interpreter Lock. Phase I started early in the development of Python 3.13, and includes making the free-threaded (GIL-less) Python build available but explicitly experimental. Phase II would make the free-threaded build officially supported but still optional, and phase III would make the free-threaded build the default. Because of the number of unknowns at the time, the criteria for moving to the next phase were left deliberately vague at the time. This PEP establishes clear expectations and requirements for moving to Phase II, making the free-threaded Python build officially supported.</description>
      <author>Thomas Wouters (thomas@python.org), Matt Page (mpage at python.org), Sam Gross (colesbury at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0779/</guid>
      <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 775: Make zlib required to build CPython</title>
      <link>https://peps.python.org/pep-0775/</link>
      <description>Building CPython without the zlib compression library will no be longer supported, and the zlib module will be required in the standard library. The only exception is WASI, as zlib is not currently supported in CPython on WASI. Building the interpreter without zlib may still be possible, but formally unsupported.</description>
      <author>Gregory P. Smith (greg@krypto.org), Stan Ulbrych (stanulbrych@gmail.com), Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0775/</guid>
      <pubDate>Mon, 24 Feb 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 774: Removing the LLVM requirement for JIT builds</title>
      <link>https://peps.python.org/pep-0774/</link>
      <description>Since Python 3.13, CPython has been able to be configured and built with an experimental just-in-time (JIT) compiler via the --enable-experimental-jit flag on Linux and Mac and --experimental-jit on Windows. To build CPython with the JIT enabled, users are required to have LLVM installed on their machine (initially, with LLVM 16 but more recently, with LLVM 19). LLVM is responsible for generating stencils that are essential to our copy-and-patch JIT (see PEP 744). These stencils are predefined, architecture-specific templates that are used to generate machine code at runtime.</description>
      <author>Savannah Ostrowski (savannah@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0774/</guid>
      <pubDate>Mon, 27 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 773: A Python Installation Manager for Windows</title>
      <link>https://peps.python.org/pep-0773/</link>
      <description>Installation of the python.org Python distribution on Windows is complex. There are three main approaches with roughly equivalent levels of user experience, and yet all of these suffer from different limitations, including failing to satisfy modern usage scenarios. This PEP proposes a design for a single Windows install workflow tool that satisfies all the needs of the existing installers for the platform, while avoiding most of their limitations, and provides the core team with the ability to manage releases for many years to come.</description>
      <author>Steve Dower</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0773/</guid>
      <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
